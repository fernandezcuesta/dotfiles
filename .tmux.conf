# GENERAL
# ==============================================================================

# Swap C-b with C-a as prefix, C-a C-a will behave as
# "go back to last window"
set -g prefix C-a
unbind C-b
bind C-a last-window

# UTF8 support
#set-option -g utf8
set-option -g status-utf8 on

# Change default delay for faster key repetition
set -sg escape-time 1

# Window and pane numbering starting from 1 instead of 0
set -g base-index 1
setw -g pane-base-index 1

# auto window rename
#set-window-option -g automatic-rename

# Scrollback history
set -g history-limit 10000

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# Mouse mode
setw -g mode-mouse off
set -g mode-mouse on
set -g mouse-select-pane on
set -g mouse-resize-pane on
set -g mouse-select-window on

# shell
set -g default-command /bin/zsh
set -g default-shell /bin/zsh

# KEY BINDINGS
# ==============================================================================

# Enable xterm keys (S-arrow, C-arrow, ...)
set-option -g xterm-keys on

# use vi mode
set-window-option -g mode-keys vi
set -g status-keys vi


# Reload configuration file
bind r source-file ~/.tmux.conf \; display "Configuration reloaded..."

# Allows us to use C-a a <command> to send commands to a TMUX session inside
# another TMUX session, or simply use C-a in any client that makes use of this
# combination.
bind a send-prefix\; display "Inside-prefix sent"

# Splitting panes
unbind %
bind v split-window -h
unbind '"'
bind s split-window

# move through panes (repetitive)
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

# resize panes (repetitive)
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# easier Copy-mode
unbind [
bind Escape copy-mode\; display "Copy mode"
unbind p
bind p paste-buffer
bind -t vi-copy 'v' begin-selection
bind -t vi-copy 'y' copy-selection

bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'"

# Clear screen (reset) and scrollbuffer - WITHOUT PREFIX (-n)
bind-key -n C-b send-keys -R \; clear-history\; \
  display "Screen and scrollbuffer cleared"

# Send C-b inside the session
bind-key C-b send-keys C-b\; display "C-b on current pane"

# Toggle mouse on with <PREFIX> m
bind m \
  set -g mode-mouse on \;\
  set -g mouse-resize-pane on \;\
  set -g mouse-select-pane on \;\
  set -g mouse-select-window on \;\
  display 'Mouse: ON'

# Toggle mouse off with <PREFIX> M
bind M \
  set -g mode-mouse off \;\
  set -g mouse-resize-pane off \;\
  set -g mouse-select-pane off \;\
  set -g mouse-select-window off \;\
  display 'Mouse: OFF'

###  Clipboard integration - requires xclip  ###
#Copy tmux paste buffer to clipboard
bind C-c run \
  "tmux save-buffer - | xclip -i -selection clipboard > /dev/null"\; \
  display "tmux->sys buffer"
#Copy clipboard to tmux paste buffer and paste tmux paste buffer
bind C-v run \
  "tmux set-buffer -- \"$(xclip -o -selection clipboard)\"; tmux paste-buffer"\; \
  display "sys->tmux buffer"


# Log output to a text file on demand

bind P pipe-pane -o "cat >>/tmp/#W.log" \; \
  display "Toggled logging to /tmp/#W.log"

# Broadcast keyboard input in all panes

bind y \
  setw synchronize-panes \; display "Broadcast mode: ON"
bind Y \
  setw synchronize-panes off \; display "Broadcast mode: OFF"

# Remap swap-pane to be repetible
unbind {
bind -r { swap-pane -U
unbind }
bind -r } swap-pane -D


# Change kill-window bind from & to X
unbind &
bind X confirm-before -p "kill-window #W? (y/n)" kill-window

# Maximize and restore a pane -- disabled in tmux1.9a due to bugs
#unbind Up
#bind Up new-window -d -n tmp \; swap-pane -s tmp:1.1 \; select-window -t
#tmp
#unbind Down
#bind Down last-window \; swap-pane -s tmp:1.1 \; kill-window -t tmp
#unbind Right
#unbind Left


# COLORS
# ==============================================================================

# Color codes can be found by running:
#     for i in {1..255}; do
#      printf "\x1b[38;5;${
# Statusbar}\n"
#     done

set -g default-terminal screen-256color
# Tell vimrc to use a 256 palette too with 'set term=screen-256color'

# Statusbar
set-option -g status-bg colour235
set-option -g status-fg colour136
set-option -g status-attr default #bright

# default window title colors
set-window-option -g window-status-fg colour244
set-window-option -g window-status-bg default
#set-window-option -g window-status-attr dim

# active window title colors
set-window-option -g window-status-current-fg colour166
set-window-option -g window-status-current-bg default
set-window-option -g window-status-current-attr bright

# pane border
set-option -g pane-border-fg colour24
#set-option -g pane-border-bg colour60
set-option -g pane-active-border-fg colour195
#set-option -g pane-active-border-bg colour26

# message text
set-option -g message-bg colour235
set-option -g message-fg colour166
set-option -g message-attr bright

# pane number display
set-option -g display-panes-active-colour colour33
set-option -g display-panes-colour colour166

# clock
set-window-option -g clock-mode-colour green

# STATUSBAR
# ==============================================================================
# Activity monitoring
set -g status-interval 60
setw -g monitor-activity on
set -g visual-activity on


set -g status-justify centre # center align window list
set -g status-left-length 22
set -g status-right-length 70
set -g status-left \
  '#[fg=green]Session: #[bright]#S #[default]• #[fg=green]w#[bright]#I#[default] • #[fg=green]p#[bright]#P'
set -g status-right \
  '#[fg=green,bg=default,bright]#(tmux-mem-cpu-load 60) #[fg=white]%H:%M #[fg=red,dim]%a #[fg=blue,bright]%d/%m/%Y'
