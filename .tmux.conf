# cat << ►_◄ > /dev/null
#
# GENERAL
# ==============================================================================

# Swap C-b with C-a as prefix, C-a will send C-a to the inner application
# "go back to previous window"
set -g prefix C-a
unbind C-b
# Allows us to use C-a C-a <command> to send commands to a TMUX session inside
# another TMUX session, or simply use C-a in any client that makes use of this
# combination.
bind C-a send-prefix\; display "Inside-prefix sent"


# UTF8 support
#set-option -g utf8
set-option -g status-utf8 on

# Change default delay for faster key repetition
set -sg escape-time 1
set -sg repeat-time 600    # increase repeat timeout

# Window and pane numbering starting from 1 instead of 0
set -g base-index 1
setw -g pane-base-index 1

# auto window rename
set-window-option -g automatic-rename
set-option -g allow-rename off
set-option -g renumber-windows on  # renumber window as windows are closed


# Default mouse mode
set -g mouse on

# Scrollback history
set -g history-limit 10000

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# shell
set -g default-command /bin/zsh
set -g default-shell /bin/zsh

# KEY BINDINGS
# ==============================================================================

# Enable xterm keys (S-arrow, C-arrow, ...)
set-option -g xterm-keys on

# use vi mode
set-window-option -g mode-keys vi
set -g status-keys vi


# Reload configuration file
bind r source-file ~/.tmux.conf \; display "Configuration reloaded..."

# Splitting panes
unbind %
bind v split-window -h
unbind '"'
bind s split-window

# move through panes (repetitive)
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R

# resize panes (repetitive)
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# easier Copy-mode
unbind [
bind a copy-mode\; display "Copy mode"
unbind p
bind p paste-buffer
bind -t vi-copy 'v' begin-selection
bind -t vi-copy C-v rectangle-toggle
bind -t vi-copy 'y' copy-selection
bind -t vi-copy Escape cancel
bind -t vi-copy H start-of-line
bind -t vi-copy L end-of-line

bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'"

# Clear screen (reset) and scrollbuffer - WITHOUT PREFIX (-n)
bind-key -n C-b send-keys -R \; clear-history\; \
  display "Screen and scrollbuffer cleared"

# Send C-b inside the session
bind-key C-b send-keys C-b\; display "C-b on current pane"

# Toggle mouse on with <PREFIX> m
bind m run "cut -c3- ~/.tmux.conf | sh -s toggle_mouse"

###  Clipboard integration - requires xclip  ###
#Copy tmux paste buffer to clipboard
bind C-c run \
  "tmux save-buffer - | xclip -i -selection clipboard > /dev/null"\; \
  display "tmux->sys buffer"
#Copy clipboard to tmux paste buffer and paste tmux paste buffer
bind C-v run \
  "tmux set-buffer -- \"$(xclip -o -selection clipboard)\"; tmux paste-buffer"\; \
  display "sys->tmux buffer"


# Log output to a text file on demand

bind P pipe-pane -o "cat >>/tmp/#W.log" \; \
  display "Toggled logging to /tmp/#W.log"

# Broadcast keyboard input in all panes

bind y \
  setw synchronize-panes \; display "Broadcast mode: ON"
bind Y \
  setw synchronize-panes off \; display "Broadcast mode: OFF"

# Remap swap-pane to be repetible
unbind {
bind -r { swap-pane -U
unbind }
bind -r } swap-pane -D


# Change kill-window bind from & to X
unbind &
bind X confirm-before -p "kill-window #W? (y/n)" kill-window

# Maximize and restore a pane - superseeded by prefix-z

# Make arrow keys not repeatable
unbind Up
unbind Down
unbind Left
unbind Right
bind-key       Up select-pane -U
bind-key     Down select-pane -D
bind-key     Left select-pane -L
bind-key    Right select-pane -R


#urxvt tab like window switching (-n: no prior escape seq)
bind -n S-left prev
bind -n S-right next
#bind -n C-left swap-window -t -1
#bind -n C-right swap-window -t +1

# COLORS
# ==============================================================================

# Color codes can be found by running:
#     for i in {1..255}; do
#      printf "\x1b[38;5;${
# Statusbar}\n"
#     done

set -g default-terminal screen-256color
# Tell vimrc to use a 256 palette too with 'set term=screen-256color'


# pane border
set-option -g pane-border-fg colour24
set-option -g pane-active-border-fg colour195

# message text
set-option -g message-bg colour166
set-option -g message-fg white
set-option -g message-attr bright

# pane number display
set-option -g display-panes-active-colour colour33
set-option -g display-panes-colour colour166
set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

# clock
set-window-option -g clock-mode-colour green

# STATUSBAR
# ==============================================================================
# Powerline
run-shell "powerline-daemon -q"
source /usr/lib/python3.4/site-packages/powerline/bindings/tmux/powerline.conf

# Activity monitoring
set -g status-interval 10  # redraw status line every 10s
setw -g monitor-activity on
set -g visual-activity off
setw -g clock-mode-style 24  # 24h hour clock
set -g status-justify centre # center align window list


# ►_◄
#
# # exit the script if any statement returns a non-true return value
# # set -e
# toggle_mouse() {
#   if (tmux show -g -w |grep -q mode-mouse); then
#     old=$(tmux show -g -w | grep mode-mouse | cut -d' ' -f2)
#     new=""
#
#     if [ "$old" = "on" ] ; then
#       new="off"
#     else
#       new="on"
#     fi
#
#     tmux set -g mouse $new \;\
#          display "mouse: $new"
#   else
#     old=$(tmux show -g | grep mouse | head -n 1 | cut -d' ' -f2)
#     new=""
#
#     if [ "$old" = "on" ] ; then
#       new="off"
#     else
#       new="on"
#     fi
#
#     tmux set -g mouse $new \;\
#          display "mouse: $new"
#   fi
# }
# $@